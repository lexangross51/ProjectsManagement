@using Microsoft.AspNetCore.Identity
@using Projects.DataAccess.Database
@using Projects.DataAccess.Models
@model Projects.Presentation.Models.Projects.UpdateProjectDto
@inject UserManager<ApplicationUser> UserManager

@{
    Layout = null;
    var user = await UserManager.GetUserAsync(User);
    var isAdmin = user != null && await UserManager.IsInRoleAsync(user, Roles.Admin);
    var isDirector = user != null && await UserManager.IsInRoleAsync(user, Roles.Director);
    var isManager = user != null && await UserManager.IsInRoleAsync(user, Roles.Manager);
}

<!DOCTYPE html>

<html lang="en">
<head>
    <title>Edit project</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.13.3/themes/smoothness/jquery-ui.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.13.3/jquery-ui.min.js"></script>
    <link rel="stylesheet" type="text/css" href="~/css/styles.css"/>
</head>
<body>
<div class="update-container">
    <form asp-action="UpdateProject" asp-controller="Project" method="post">
        @Html.AntiForgeryToken()
        <div>
            <input type="hidden" asp-for="Id"/>
        </div>

        @if (isAdmin || isDirector)
        {
            <div>
                <label asp-for="ProjectName" class="update-label">Project name: </label>
                <input asp-for="ProjectName" class="update-input"/>
                <span asp-validation-for="ProjectName"></span>
            </div>
            <div>
                <label asp-for="CompanyCustomer" class="update-label">Customer company: </label>
                <input asp-for="CompanyCustomer" class="update-input"/>
                <span asp-validation-for="CompanyCustomer"></span>
            </div>
            <div>
                <label asp-for="CompanyExecutor" class="update-label">Executor company: </label>
                <input asp-for="CompanyExecutor" class="update-input"/>
                <span asp-validation-for="CompanyExecutor"></span>
            </div>
            <div>
                <label asp-for="Priority" class="update-label">Priority: </label>
                <input asp-for="Priority" class="update-input"/>
                <span asp-validation-for="Priority"></span>
            </div>
            <div>
                <label asp-for="DateStart" class="update-label">Date start: </label>
                <input type="date" asp-for="DateStart" class="update-input"/>
                <span asp-validation-for="DateStart"></span>
            </div>
            <div>
                <label asp-for="DateEnd" class="update-label">Date end: </label>
                <input type="date" asp-for="DateEnd" class="update-input"/>
                <span asp-validation-for="DateEnd"></span>
            </div>
            <div>
                <label class="update-label">Manager: </label>
                <input type="text" id="managerName" value="@Model.Manager?.FullName" class="update-input"/>
                <input type="hidden" id="managerId" asp-for="ManagerId"/>
            </div>
        }
        else
        {
            <div>
                <input type="hidden" asp-for="ProjectName"/>
                <input type="hidden" asp-for="CompanyCustomer"/>
                <input type="hidden" asp-for="CompanyExecutor"/>
                <input type="hidden" asp-for="Priority"/>
                <input type="hidden" asp-for="DateStart"/>
                <input type="hidden" asp-for="DateEnd"/>
                <input type="hidden" id="managerName" value="@Model.Manager?.FullName"/>
                <input type="hidden" id="managerId" asp-for="ManagerId"/>
            </div>
        }

        <script type="text/javascript">
            $(document).ready(function () {
                $('#managerName').autocomplete({
                    source: function (request, response) {
                        $.ajax({
                            url: '/Employee/EmployeesJson/',
                            type: 'GET',
                            data: { term: request.term, role: "Manager" },
                            success: function (data) {
                                response($.map(data, function (item) {
                                    return { label: item.value, value: item.id }
                                }))
                            }
                        });
                    },
                    select: function (event, ui) {
                        $('#managerName').val(ui.item.label);
                        $('#managerId').val(ui.item.value);
                        return false;
                    }
                }).on('mousedown', function () {
                    $(this).autocomplete("search", " ");
                });
            });
        </script>

        @if (isAdmin || isDirector || isManager)
        {
            <div>
                <label class="update-label">Executors: </label>
                <input type="text" id="executorsNames" class="update-input"/>
                <input type="hidden" id="executorsId" asp-for="ExecutorsId"/>
                <ul id="selectedExecutors" class="custom-list">
                    @if (Model.Executors != null)
                    {
                        foreach (var e in Model.Executors)
                        {
                            <li data-id="@e.Id">
                                @e.FullName <button class="base-button remove-button"> X </button>
                            </li>
                        }
                    }
                </ul>

                <script type="text/javascript">
                $(document).ready(function () {
                    const selectedExecutors = $('#selectedExecutors');
                    
                    $('#executorsNames').autocomplete({
                        source: function (request, response) {
                            $.ajax({
                                url: '/Employee/EmployeesJson/',
                                type: 'GET',
                                data: { term: request.term, role: "Employee" },
                                success: function (data) {
                                    response($.map(data, function (item) {
                                        return { label: item.value, value: item.id }
                                    }))
                                }
                            });
                        },
                        select: function (event, ui) {
                            selectedExecutors.append('<li data-id="' + ui.item.value + '">' + ui.item.label + ' <button class="base-button remove-button"> X </button></li>');
                            updateSelectedExecutorsList();
                            return false;
                        }
                    }).on('mousedown', function () {
                        $(this).autocomplete("search", " ");
                    })

                    selectedExecutors.on("click", ".remove-button", function () {
                        $(this).parent().remove();
                        updateSelectedExecutorsList();
                    })

                    function updateSelectedExecutorsList() {
                        const selectedExecutors = $("#selectedExecutors li").map(function () {
                            return $(this).data('id');
                        }).get().join(",");

                        $('#executorsId').val(selectedExecutors);
                    }
                })
            </script>
            </div>
        }

        <div>
            <input type="submit" value="Update"/>
        </div>
    </form>
</div>
</body>
</html>